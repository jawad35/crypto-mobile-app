{"ast":null,"code":"import * as React from 'react';\nimport { useLineChartPrice } from \"./usePrice\";\nimport { AnimatedText } from \"../../components/AnimatedText\";\nLineChartPriceText.displayName = 'LineChartPriceText';\nexport function LineChartPriceText(_ref) {\n  var format = _ref.format,\n    _ref$precision = _ref.precision,\n    precision = _ref$precision === void 0 ? 2 : _ref$precision,\n    _ref$variant = _ref.variant,\n    variant = _ref$variant === void 0 ? 'formatted' : _ref$variant,\n    style = _ref.style,\n    index = _ref.index;\n  var price = useLineChartPrice({\n    format: format,\n    precision: precision,\n    index: index\n  });\n  return React.createElement(AnimatedText, {\n    text: price[variant],\n    style: style\n  });\n}","map":{"version":3,"names":["React","useLineChartPrice","AnimatedText","LineChartPriceText","displayName","_ref","format","_ref$precision","precision","_ref$variant","variant","style","index","price","createElement","text"],"sources":["C:\\Users\\UEFI\\Desktop\\exchangepro\\crypto_mobile_app (copy)\\node_modules\\react-native-wagmi-charts\\src\\charts\\line\\PriceText.tsx"],"sourcesContent":["import * as React from 'react';\nimport type { TextProps as RNTextProps } from 'react-native';\nimport type Animated from 'react-native-reanimated';\n\nimport { useLineChartPrice } from './usePrice';\nimport type { TFormatterFn } from '../candle/types';\nimport { AnimatedText } from '../../components/AnimatedText';\n\nexport type LineChartPriceTextProps = {\n  format?: TFormatterFn<string>;\n  precision?: number;\n  variant?: 'formatted' | 'value';\n  style?: Animated.AnimateProps<RNTextProps>['style'];\n  /**\n   * By default, it will use the current active index from the chart.\n   * If this is set it will use the index provided.\n   */\n  index?: number;\n};\n\nLineChartPriceText.displayName = 'LineChartPriceText';\n\nexport function LineChartPriceText({\n  format,\n  precision = 2,\n  variant = 'formatted',\n  style,\n  index,\n}: LineChartPriceTextProps) {\n  const price = useLineChartPrice({ format, precision, index });\n  return <AnimatedText text={price[variant]} style={style} />;\n}\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAI9B,SAASC,iBAAiB;AAE1B,SAASC,YAAY;AAcrBC,kBAAkB,CAACC,WAAW,GAAG,oBAAoB;AAErD,OAAO,SAASD,kBAAkBA,CAAAE,IAAA,EAMN;EAAA,IAL1BC,MAAM,GAAAD,IAAA,CAANC,MAAM;IAAAC,cAAA,GAAAF,IAAA,CACNG,SAAS;IAATA,SAAS,GAAAD,cAAA,cAAG,CAAC,GAAAA,cAAA;IAAAE,YAAA,GAAAJ,IAAA,CACbK,OAAO;IAAPA,OAAO,GAAAD,YAAA,cAAG,WAAW,GAAAA,YAAA;IACrBE,KAAK,GAAAN,IAAA,CAALM,KAAK;IACLC,KAAA,GAAAP,IAAA,CAAAO,KAAA;EAEA,IAAMC,KAAK,GAAGZ,iBAAiB,CAAC;IAAEK,MAAM,EAANA,MAAM;IAAEE,SAAS,EAATA,SAAS;IAAEI,KAAA,EAAAA;EAAM,CAAC,CAAC;EAC7D,OAAOZ,KAAA,CAAAc,aAAA,CAACZ,YAAY;IAACa,IAAI,EAAEF,KAAK,CAACH,OAAO,CAAE;IAACC,KAAK,EAAEA;EAAM,CAAE,CAAC;AAC7D"},"metadata":{},"sourceType":"module","externalDependencies":[]}