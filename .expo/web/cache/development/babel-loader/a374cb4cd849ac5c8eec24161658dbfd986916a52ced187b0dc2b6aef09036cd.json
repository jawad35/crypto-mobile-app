{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"color\", \"inactiveColor\", \"width\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport Animated from 'react-native-reanimated';\nimport { Path } from 'react-native-svg';\nimport { LineChartDimensionsContext } from \"./Chart\";\nimport { LineChartPathContext } from \"./LineChartPathContext\";\nimport useAnimatedPath from \"./useAnimatedPath\";\nvar AnimatedPath = Animated.createAnimatedComponent(Path);\nLineChartPath.displayName = 'LineChartPath';\nexport function LineChartPath(_ref) {\n  var _ref$color = _ref.color,\n    color = _ref$color === void 0 ? 'black' : _ref$color,\n    inactiveColor = _ref.inactiveColor,\n    _ref$width = _ref.width,\n    strokeWidth = _ref$width === void 0 ? 3 : _ref$width,\n    props = _objectWithoutProperties(_ref, _excluded);\n  var _React$useContext = React.useContext(LineChartDimensionsContext),\n    path = _React$useContext.path;\n  var _React$useContext2 = React.useContext(LineChartPathContext),\n    isTransitionEnabled = _React$useContext2.isTransitionEnabled,\n    isInactive = _React$useContext2.isInactive;\n  var _useAnimatedPath = useAnimatedPath({\n      enabled: isTransitionEnabled,\n      path: path\n    }),\n    animatedProps = _useAnimatedPath.animatedProps;\n  return React.createElement(React.Fragment, null, React.createElement(AnimatedPath, _extends({\n    animatedProps: animatedProps,\n    fill: \"transparent\",\n    stroke: isInactive ? inactiveColor || color : color,\n    strokeOpacity: isInactive && !inactiveColor ? 0.2 : 1,\n    strokeWidth: strokeWidth\n  }, props)));\n}","map":{"version":3,"names":["React","Animated","Path","LineChartDimensionsContext","LineChartPathContext","useAnimatedPath","AnimatedPath","createAnimatedComponent","LineChartPath","displayName","_ref","_ref$color","color","inactiveColor","_ref$width","width","strokeWidth","props","_objectWithoutProperties","_excluded","_React$useContext","useContext","path","_React$useContext2","isTransitionEnabled","isInactive","_useAnimatedPath","enabled","animatedProps","createElement","Fragment","_extends","fill","stroke","strokeOpacity"],"sources":["C:\\Users\\om\\Downloads\\Crypto Exchange\\Crypto Exchange\\Font-End\\crypto_mobile_app (copy)\\node_modules\\react-native-wagmi-charts\\src\\charts\\line\\Path.tsx"],"sourcesContent":["import * as React from 'react';\nimport Animated from 'react-native-reanimated';\nimport { Path, PathProps } from 'react-native-svg';\n\nimport { LineChartDimensionsContext } from './Chart';\nimport { LineChartPathContext } from './LineChartPathContext';\nimport useAnimatedPath from './useAnimatedPath';\n\nconst AnimatedPath = Animated.createAnimatedComponent(Path);\n\nexport type LineChartPathProps = Animated.AnimateProps<PathProps> & {\n  color?: string;\n  inactiveColor?: string;\n  width?: number;\n  isInactive?: boolean;\n  /**\n   * Default: `true`.\n   *\n   * If `false`, changes in the chart's path will not animate.\n   *\n   * While this use case is rare, it may be useful on web, where animations might not work as well.\n   *\n   * **Example**\n   *\n   * ```tsx\n   * <LineChart.Path\n   *   pathProps={{ isTransitionEnabled: Platform.OS !== 'web' }}\n   * />\n   * ```\n   */\n  isTransitionEnabled?: boolean;\n};\n\nLineChartPath.displayName = 'LineChartPath';\n\nexport function LineChartPath({\n  color = 'black',\n  inactiveColor,\n  width: strokeWidth = 3,\n  ...props\n}: LineChartPathProps) {\n  const { path } = React.useContext(LineChartDimensionsContext);\n  const { isTransitionEnabled, isInactive } =\n    React.useContext(LineChartPathContext);\n\n  ////////////////////////////////////////////////\n\n  const { animatedProps } = useAnimatedPath({\n    enabled: isTransitionEnabled,\n    path,\n  });\n\n  ////////////////////////////////////////////////\n\n  return (\n    <>\n      <AnimatedPath\n        animatedProps={animatedProps}\n        fill=\"transparent\"\n        stroke={isInactive ? inactiveColor || color : color}\n        strokeOpacity={isInactive && !inactiveColor ? 0.2 : 1}\n        strokeWidth={strokeWidth}\n        {...props}\n      />\n    </>\n  );\n}\n"],"mappings":";;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAOC,QAAQ,MAAM,yBAAyB;AAC9C,SAASC,IAAI,QAAmB,kBAAkB;AAElD,SAASC,0BAA0B;AACnC,SAASC,oBAAoB;AAC7B,OAAOC,eAAe;AAEtB,IAAMC,YAAY,GAAGL,QAAQ,CAACM,uBAAuB,CAACL,IAAI,CAAC;AAyB3DM,aAAa,CAACC,WAAW,GAAG,eAAe;AAE3C,OAAO,SAASD,aAAaA,CAAAE,IAAA,EAKN;EAAA,IAAAC,UAAA,GAAAD,IAAA,CAJrBE,KAAK;IAALA,KAAK,GAAAD,UAAA,cAAG,OAAO,GAAAA,UAAA;IACfE,aAAa,GAAAH,IAAA,CAAbG,aAAa;IAAAC,UAAA,GAAAJ,IAAA,CACbK,KAAK;IAAEC,WAAW,GAAAF,UAAA,cAAG,CAAC,GAAAA,UAAA;IACnBG,KAAA,GAAAC,wBAAA,CAAAR,IAAA,EAAAS,SAAA;EAEH,IAAAC,iBAAA,GAAiBpB,KAAK,CAACqB,UAAU,CAAClB,0BAA0B,CAAC;IAArDmB,IAAA,GAAAF,iBAAA,CAAAE,IAAA;EACR,IAAAC,kBAAA,GACEvB,KAAK,CAACqB,UAAU,CAACjB,oBAAoB,CAAC;IADhCoB,mBAAmB,GAAAD,kBAAA,CAAnBC,mBAAmB;IAAEC,UAAA,GAAAF,kBAAA,CAAAE,UAAA;EAK7B,IAAAC,gBAAA,GAA0BrB,eAAe,CAAC;MACxCsB,OAAO,EAAEH,mBAAmB;MAC5BF,IAAA,EAAAA;IACF,CAAC,CAAC;IAHMM,aAAA,GAAAF,gBAAA,CAAAE,aAAA;EAOR,OACE5B,KAAA,CAAA6B,aAAA,CAAA7B,KAAA,CAAA8B,QAAA,QACE9B,KAAA,CAAA6B,aAAA,CAACvB,YAAY,EAAAyB,QAAA;IACXH,aAAa,EAAEA,aAAc;IAC7BI,IAAI,EAAC,aAAa;IAClBC,MAAM,EAAER,UAAU,GAAGZ,aAAa,IAAID,KAAK,GAAGA,KAAM;IACpDsB,aAAa,EAAET,UAAU,IAAI,CAACZ,aAAa,GAAG,GAAG,GAAG,CAAE;IACtDG,WAAW,EAAEA;EAAY,GACrBC,KAAK,CACV,CACD,CAAC;AAEP"},"metadata":{},"sourceType":"module","externalDependencies":[]}