{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"color\", \"inactiveColor\", \"showInactiveColor\", \"from\", \"to\", \"width\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport Animated from 'react-native-reanimated';\nimport { Path } from 'react-native-svg';\nimport { LineChartDimensionsContext } from \"./Chart\";\nimport { LineChartPathContext } from \"./LineChartPathContext\";\nimport useAnimatedPath from \"./useAnimatedPath\";\nimport { useLineChart } from \"./useLineChart\";\nimport { getPath } from \"./utils\";\nvar AnimatedPath = Animated.createAnimatedComponent(Path);\nLineChartHighlight.displayName = 'LineChartHighlight';\nexport function LineChartHighlight(_ref) {\n  var _ref$color = _ref.color,\n    color = _ref$color === void 0 ? 'black' : _ref$color,\n    inactiveColor = _ref.inactiveColor,\n    _ref$showInactiveColo = _ref.showInactiveColor,\n    showInactiveColor = _ref$showInactiveColo === void 0 ? true : _ref$showInactiveColo,\n    from = _ref.from,\n    to = _ref.to,\n    _ref$width = _ref.width,\n    strokeWidth = _ref$width === void 0 ? 3 : _ref$width,\n    props = _objectWithoutProperties(_ref, _excluded);\n  var _useLineChart = useLineChart(),\n    data = _useLineChart.data,\n    yDomain = _useLineChart.yDomain;\n  var _React$useContext = React.useContext(LineChartDimensionsContext),\n    pathWidth = _React$useContext.pathWidth,\n    height = _React$useContext.height,\n    gutter = _React$useContext.gutter,\n    shape = _React$useContext.shape;\n  var _React$useContext2 = React.useContext(LineChartPathContext),\n    isTransitionEnabled = _React$useContext2.isTransitionEnabled,\n    _isInactive = _React$useContext2.isInactive;\n  var isInactive = showInactiveColor && _isInactive;\n  var path = React.useMemo(function () {\n    if (data && data.length > 0) {\n      return getPath({\n        data: data,\n        from: from,\n        to: to,\n        width: pathWidth,\n        height: height,\n        gutter: gutter,\n        shape: shape,\n        yDomain: yDomain\n      });\n    }\n    return '';\n  }, [data, from, to, pathWidth, height, gutter, shape, yDomain]);\n  var _useAnimatedPath = useAnimatedPath({\n      enabled: isTransitionEnabled,\n      path: path\n    }),\n    animatedProps = _useAnimatedPath.animatedProps;\n  return React.createElement(React.Fragment, null, React.createElement(AnimatedPath, _extends({\n    animatedProps: animatedProps,\n    fill: \"transparent\",\n    stroke: isInactive ? inactiveColor || color : color,\n    strokeWidth: strokeWidth,\n    strokeOpacity: isInactive && !inactiveColor ? 0.5 : 1\n  }, props)));\n}","map":{"version":3,"names":["React","Animated","Path","LineChartDimensionsContext","LineChartPathContext","useAnimatedPath","useLineChart","getPath","AnimatedPath","createAnimatedComponent","LineChartHighlight","displayName","_ref","_ref$color","color","inactiveColor","_ref$showInactiveColo","showInactiveColor","from","to","_ref$width","width","strokeWidth","props","_objectWithoutProperties","_excluded","_useLineChart","data","yDomain","_React$useContext","useContext","pathWidth","height","gutter","shape","_React$useContext2","isTransitionEnabled","_isInactive","isInactive","path","useMemo","length","_useAnimatedPath","enabled","animatedProps","createElement","Fragment","_extends","fill","stroke","strokeOpacity"],"sources":["C:\\Users\\UEFI\\Desktop\\Crypto App\\crypto_mobile_app (copy) (2)\\node_modules\\react-native-wagmi-charts\\src\\charts\\line\\Highlight.tsx"],"sourcesContent":["import * as React from 'react';\nimport Animated from 'react-native-reanimated';\nimport { Path, PathProps } from 'react-native-svg';\n\nimport { LineChartDimensionsContext } from './Chart';\nimport { LineChartPathContext } from './LineChartPathContext';\nimport useAnimatedPath from './useAnimatedPath';\nimport { useLineChart } from './useLineChart';\nimport { getPath } from './utils';\n\nconst AnimatedPath = Animated.createAnimatedComponent(Path);\n\nexport type LineChartColorProps = Animated.AnimateProps<PathProps> & {\n  color?: string;\n  from: number;\n  to: number;\n  showInactiveColor?: boolean;\n  inactiveColor?: string;\n  width?: number;\n};\n\nLineChartHighlight.displayName = 'LineChartHighlight';\n\nexport function LineChartHighlight({\n  color = 'black',\n  inactiveColor,\n  showInactiveColor = true,\n  from,\n  to,\n  width: strokeWidth = 3,\n  ...props\n}: LineChartColorProps) {\n  const { data, yDomain } = useLineChart();\n  const { pathWidth, height, gutter, shape } = React.useContext(\n    LineChartDimensionsContext\n  );\n  const { isTransitionEnabled, isInactive: _isInactive } =\n    React.useContext(LineChartPathContext);\n  const isInactive = showInactiveColor && _isInactive;\n\n  ////////////////////////////////////////////////\n\n  const path = React.useMemo(() => {\n    if (data && data.length > 0) {\n      return getPath({\n        data,\n        from,\n        to,\n        width: pathWidth,\n        height,\n        gutter,\n        shape,\n        yDomain,\n      });\n    }\n    return '';\n  }, [data, from, to, pathWidth, height, gutter, shape, yDomain]);\n\n  const { animatedProps } = useAnimatedPath({\n    enabled: isTransitionEnabled,\n    path,\n  });\n\n  ////////////////////////////////////////////////\n\n  return (\n    <>\n      <AnimatedPath\n        animatedProps={animatedProps}\n        fill=\"transparent\"\n        stroke={isInactive ? inactiveColor || color : color}\n        strokeWidth={strokeWidth}\n        strokeOpacity={isInactive && !inactiveColor ? 0.5 : 1}\n        {...props}\n      />\n    </>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}