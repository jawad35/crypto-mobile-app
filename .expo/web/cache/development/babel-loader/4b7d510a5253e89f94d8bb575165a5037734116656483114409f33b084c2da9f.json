{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\", \"yGutter\", \"width\", \"height\", \"shape\", \"id\", \"absolute\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport * as d3Shape from 'd3-shape';\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { LineChartIdProvider, useLineChartData } from \"./Data\";\nimport { parse } from 'react-native-redash';\nimport { getArea, getPath } from \"./utils\";\nimport { LineChartContext } from \"./Context\";\nexport var LineChartDimensionsContext = React.createContext({\n  width: 0,\n  height: 0,\n  pointWidth: 0,\n  parsedPath: {},\n  path: '',\n  area: '',\n  shape: d3Shape.curveBumpX,\n  gutter: 0,\n  pathWidth: 0\n});\nvar _Dimensions$get = Dimensions.get('window'),\n  screenWidth = _Dimensions$get.width;\nLineChart.displayName = 'LineChart';\nexport function LineChart(_ref) {\n  var children = _ref.children,\n    _ref$yGutter = _ref.yGutter,\n    yGutter = _ref$yGutter === void 0 ? 16 : _ref$yGutter,\n    _ref$width = _ref.width,\n    width = _ref$width === void 0 ? screenWidth : _ref$width,\n    _ref$height = _ref.height,\n    height = _ref$height === void 0 ? screenWidth : _ref$height,\n    _ref$shape = _ref.shape,\n    shape = _ref$shape === void 0 ? d3Shape.curveBumpX : _ref$shape,\n    id = _ref.id,\n    absolute = _ref.absolute,\n    props = _objectWithoutProperties(_ref, _excluded);\n  var _React$useContext = React.useContext(LineChartContext),\n    yDomain = _React$useContext.yDomain,\n    xLength = _React$useContext.xLength,\n    xDomain = _React$useContext.xDomain;\n  var _useLineChartData = useLineChartData({\n      id: id\n    }),\n    data = _useLineChartData.data;\n  var pathWidth = React.useMemo(function () {\n    var allowedWidth = width;\n    if (xLength > data.length) {\n      allowedWidth = width * data.length / xLength;\n    }\n    return allowedWidth;\n  }, [data.length, width, xLength]);\n  var path = React.useMemo(function () {\n    if (data && data.length > 0) {\n      return getPath({\n        data: data,\n        width: pathWidth,\n        height: height,\n        gutter: yGutter,\n        shape: shape,\n        yDomain: yDomain,\n        xDomain: xDomain\n      });\n    }\n    return '';\n  }, [data, pathWidth, height, yGutter, shape, yDomain, xDomain]);\n  var area = React.useMemo(function () {\n    if (data && data.length > 0) {\n      return getArea({\n        data: data,\n        width: pathWidth,\n        height: height,\n        gutter: yGutter,\n        shape: shape,\n        yDomain: yDomain,\n        xDomain: xDomain\n      });\n    }\n    return '';\n  }, [data, pathWidth, height, yGutter, shape, yDomain, xDomain]);\n  var dataLength = data.length;\n  var parsedPath = React.useMemo(function () {\n    return parse(path);\n  }, [path]);\n  var pointWidth = React.useMemo(function () {\n    return width / (dataLength - 1);\n  }, [dataLength, width]);\n  var contextValue = React.useMemo(function () {\n    return {\n      gutter: yGutter,\n      parsedPath: parsedPath,\n      pointWidth: pointWidth,\n      area: area,\n      path: path,\n      width: width,\n      height: height,\n      pathWidth: pathWidth,\n      shape: shape\n    };\n  }, [yGutter, parsedPath, pointWidth, area, path, width, height, pathWidth, shape]);\n  return React.createElement(LineChartIdProvider, {\n    id: id\n  }, React.createElement(LineChartDimensionsContext.Provider, {\n    value: contextValue\n  }, React.createElement(View, _extends({}, props, {\n    style: [absolute && styles.absolute, props.style]\n  }), children)));\n}\nvar styles = StyleSheet.create({\n  absolute: {\n    position: 'absolute'\n  }\n});","map":{"version":3,"names":["React","d3Shape","Dimensions","StyleSheet","View","LineChartIdProvider","useLineChartData","parse","getArea","getPath","LineChartContext","LineChartDimensionsContext","createContext","width","height","pointWidth","parsedPath","path","area","shape","curveBumpX","gutter","pathWidth","_Dimensions$get","get","screenWidth","LineChart","displayName","_ref","children","_ref$yGutter","yGutter","_ref$width","_ref$height","_ref$shape","id","absolute","props","_objectWithoutProperties","_excluded","_React$useContext","useContext","yDomain","xLength","xDomain","_useLineChartData","data","useMemo","allowedWidth","length","dataLength","contextValue","createElement","Provider","value","_extends","style","styles","create","position"],"sources":["/Users/macbookpro/Downloads/crypto_mobile_app (copy) (2)/node_modules/react-native-wagmi-charts/src/charts/line/Chart.tsx"],"sourcesContent":["import * as React from 'react';\n// @ts-ignore\nimport * as d3Shape from 'd3-shape';\n\nimport { Dimensions, StyleSheet, View, ViewProps } from 'react-native';\nimport { LineChartIdProvider, useLineChartData } from './Data';\nimport { Path, parse } from 'react-native-redash';\nimport { getArea, getPath } from './utils';\n\nimport { LineChartContext } from './Context';\n\nexport const LineChartDimensionsContext = React.createContext({\n  width: 0,\n  height: 0,\n  pointWidth: 0,\n  parsedPath: {} as Path,\n  path: '',\n  area: '',\n  shape: d3Shape.curveBumpX,\n  gutter: 0,\n  pathWidth: 0,\n});\n\ntype LineChartProps = ViewProps & {\n  children: React.ReactNode;\n  yGutter?: number;\n  width?: number;\n  height?: number;\n  shape?: unknown;\n  /**\n   * If your `LineChart.Provider` uses a dictionary with multiple IDs for multiple paths, then this field is required.\n   */\n  id?: string;\n  absolute?: boolean;\n};\n\nconst { width: screenWidth } = Dimensions.get('window');\n\nLineChart.displayName = 'LineChart';\n\nexport function LineChart({\n  children,\n  yGutter = 16,\n  width = screenWidth,\n  height = screenWidth,\n  shape = d3Shape.curveBumpX,\n  id,\n  absolute,\n  ...props\n}: LineChartProps) {\n  const { yDomain, xLength, xDomain } = React.useContext(LineChartContext);\n  const { data } = useLineChartData({\n    id,\n  });\n\n  const pathWidth = React.useMemo(() => {\n    let allowedWidth = width;\n    if (xLength > data.length) {\n      allowedWidth = (width * data.length) / xLength;\n    }\n    return allowedWidth;\n  }, [data.length, width, xLength]);\n\n  const path = React.useMemo(() => {\n    if (data && data.length > 0) {\n      return getPath({\n        data,\n        width: pathWidth,\n        height,\n        gutter: yGutter,\n        shape,\n        yDomain,\n        xDomain,\n      });\n    }\n    return '';\n  }, [data, pathWidth, height, yGutter, shape, yDomain, xDomain]);\n\n  const area = React.useMemo(() => {\n    if (data && data.length > 0) {\n      return getArea({\n        data,\n        width: pathWidth,\n        height,\n        gutter: yGutter,\n        shape,\n        yDomain,\n        xDomain,\n      });\n    }\n    return '';\n  }, [data, pathWidth, height, yGutter, shape, yDomain, xDomain]);\n\n  const dataLength = data.length;\n  const parsedPath = React.useMemo(() => parse(path), [path]);\n  const pointWidth = React.useMemo(\n    () => width / (dataLength - 1),\n    [dataLength, width]\n  );\n\n  const contextValue = React.useMemo(\n    () => ({\n      gutter: yGutter,\n      parsedPath,\n      pointWidth,\n      area,\n      path,\n      width,\n      height,\n      pathWidth,\n      shape,\n    }),\n    [\n      yGutter,\n      parsedPath,\n      pointWidth,\n      area,\n      path,\n      width,\n      height,\n      pathWidth,\n      shape,\n    ]\n  );\n\n  return (\n    <LineChartIdProvider id={id}>\n      <LineChartDimensionsContext.Provider value={contextValue}>\n        <View {...props} style={[absolute && styles.absolute, props.style]}>\n          {children}\n        </View>\n      </LineChartDimensionsContext.Provider>\n    </LineChartIdProvider>\n  );\n}\n\nconst styles = StyleSheet.create({\n  absolute: {\n    position: 'absolute',\n  },\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}