{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport React, { useState } from \"react\";\nimport VolumeValue from \"./VolumeValue\";\nimport { TextInput } from \"react-native-gesture-handler\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar SelectVolume = function SelectVolume(_ref) {\n  var onSelectVolume = _ref.onSelectVolume,\n    setSelectedButtonIndexVol = _ref.setSelectedButtonIndexVol,\n    selectedButtonIndexVol = _ref.selectedButtonIndexVol,\n    minBalance = _ref.minBalance;\n  var _useState = useState(\"\"),\n    _useState2 = _slicedToArray(_useState, 2),\n    volValue = _useState2[0],\n    setVolValue = _useState2[1];\n  var handleBoxPress = function handleBoxPress(item, index) {\n    setSelectedButtonIndexVol(index);\n    onSelectVolume(item);\n    setVolValue(item.value);\n  };\n  var boxData = [{\n    label: '100',\n    value: 100\n  }, {\n    label: '500',\n    value: 500\n  }, {\n    label: '1000',\n    value: 1000\n  }, {\n    label: '2000',\n    value: 2000\n  }, {\n    label: '5000',\n    value: 5000\n  }, {\n    label: '10000',\n    value: 10000\n  }, {\n    label: '20000',\n    value: 20000\n  }, {\n    label: 'All',\n    value: 0.00\n  }];\n  return _jsxs(View, {\n    style: {\n      marginTop: \"5%\",\n      marginTop: \"8%\"\n    },\n    children: [_jsx(Text, {\n      style: {\n        fontWeight: \"500\",\n        color: \"white\",\n        fontSize: 15\n      },\n      children: \"Buying Volume\"\n    }), _jsx(FlatList, {\n      data: boxData,\n      numColumns: \"4\",\n      columnWrapperStyle: {\n        justifyContent: 'space-between'\n      },\n      keyExtractor: function keyExtractor(item, index) {\n        return index == null ? void 0 : index.toString();\n      },\n      renderItem: function renderItem(_ref2) {\n        var item = _ref2.item,\n          index = _ref2.index;\n        return _jsx(TouchableOpacity, {\n          onPress: function onPress() {\n            return handleBoxPress(item, index);\n          },\n          children: _jsx(VolumeValue, {\n            item: item,\n            bgColor: selectedButtonIndexVol === index ? \"#0052fe\" : \"#2f323b\"\n          })\n        });\n      }\n    })]\n  });\n};\nexport default SelectVolume;\nvar styles = StyleSheet.create({});","map":{"version":3,"names":["React","useState","VolumeValue","TextInput","jsx","_jsx","jsxs","_jsxs","SelectVolume","_ref","onSelectVolume","setSelectedButtonIndexVol","selectedButtonIndexVol","minBalance","_useState","_useState2","_slicedToArray","volValue","setVolValue","handleBoxPress","item","index","value","boxData","label","View","style","marginTop","children","Text","fontWeight","color","fontSize","FlatList","data","numColumns","columnWrapperStyle","justifyContent","keyExtractor","toString","renderItem","_ref2","TouchableOpacity","onPress","bgColor","styles","StyleSheet","create"],"sources":["C:/Users/om/Downloads/Crypto Exchange/Crypto Exchange/Font-End/crypto_mobile_app (copy)/components/SelectVolume.js"],"sourcesContent":["import {\n  Dimensions,\n  FlatList,\n  StyleSheet,\n  Text,\n  TouchableOpacity,\n  View,\n} from \"react-native\";\nimport React, { useState } from \"react\";\nimport VolumeValue from \"./VolumeValue\";\nimport { TextInput } from \"react-native-gesture-handler\";\n\nconst SelectVolume = ({\n  onSelectVolume,\n  setSelectedButtonIndexVol,\n  selectedButtonIndexVol,\n  minBalance\n}) => {\n  const [volValue, setVolValue] = useState(\"\");\n\n  const handleBoxPress = (item, index) => {\n    setSelectedButtonIndexVol(index);\n    onSelectVolume(item);\n    setVolValue(item.value);\n  };\n  const boxData = [\n    { label: '100',value: 100 },\n    {label: '500', value: 500 },\n    { label: '1000',value: 1000 },\n    {label: '2000', value: 2000 },\n    {label: '5000', value: 5000 },\n    {label: '10000', value: 10000 },\n    { label: '20000',value: 20000 },\n    {label: 'All', value: 0.00 },\n    // Add more box data as needed\n  ];\n  return (\n    <View style={{ marginTop: \"5%\" , marginTop: \"8%\" }}>\n      <Text style={{ fontWeight: \"500\", color: \"white\" ,fontSize:15 }}>Buying Volume</Text>\n      {/* <View\n        style={{\n          paddingHorizontal: 6,\n          paddingVertical: 10,\n          backgroundColor: \"#2f323b\",\n          // borderRadius: 5,\n          marginVertical: 16,\n        }}\n      >\n        <Text style={{ color: \"grey\", fontWeight: \"500\", fontSize: 16 }}>\n          {volValue ? volValue : minBalance || \"Amount Min 100 USDT\"}\n        </Text>\n      </View> */}\n      <FlatList\n        data={boxData}\n        numColumns={\"4\"}\n        columnWrapperStyle={{justifyContent:'space-between'}}\n        keyExtractor={(item, index) => index?.toString()}\n        renderItem={({ item, index }) => (\n          <TouchableOpacity onPress={() => handleBoxPress(item, index)}>\n            <VolumeValue\n              item={item}\n              bgColor={selectedButtonIndexVol === index ? \"#0052fe\" : \"#2f323b\"}\n            />\n          </TouchableOpacity>\n        )}\n      />\n    </View>\n  );\n};\n\nexport default SelectVolume;\n\nconst styles = StyleSheet.create({});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}