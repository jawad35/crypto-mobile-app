{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport * as React from 'react';\nimport { LineChartContext } from \"./Context\";\nimport { useLineChartData, useLineChartId } from \"./Data\";\nimport { useCurrentY } from \"./useCurrentY\";\nexport function useLineChart() {\n  var lineChartContext = React.useContext(LineChartContext);\n  var maybeId = useLineChartId();\n  var dataContext = useLineChartData({\n    id: maybeId\n  });\n  var currentY = useCurrentY();\n  return React.useMemo(function () {\n    return _objectSpread(_objectSpread(_objectSpread({}, lineChartContext), dataContext), {}, {\n      currentY: currentY\n    });\n  }, [lineChartContext, dataContext, currentY]);\n}","map":{"version":3,"names":["React","LineChartContext","useLineChartData","useLineChartId","useCurrentY","useLineChart","lineChartContext","useContext","maybeId","dataContext","id","currentY","useMemo","_objectSpread"],"sources":["C:\\Users\\om\\Downloads\\Crypto Exchange\\Crypto Exchange\\Font-End\\crypto_mobile_app (copy)\\node_modules\\react-native-wagmi-charts\\src\\charts\\line\\useLineChart.ts"],"sourcesContent":["import * as React from 'react';\n\nimport { LineChartContext } from './Context';\nimport { useLineChartData, useLineChartId } from './Data';\nimport { useCurrentY } from './useCurrentY';\n\nexport function useLineChart() {\n  const lineChartContext = React.useContext(LineChartContext);\n  const maybeId = useLineChartId();\n  const dataContext = useLineChartData({\n    id: maybeId,\n  });\n  const currentY = useCurrentY();\n\n  return React.useMemo(\n    () => ({ ...lineChartContext, ...dataContext, currentY }),\n    [lineChartContext, dataContext, currentY]\n  );\n}\n"],"mappings":";;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAE9B,SAASC,gBAAgB;AACzB,SAASC,gBAAgB,EAAEC,cAAc;AACzC,SAASC,WAAW;AAEpB,OAAO,SAASC,YAAYA,CAAA,EAAG;EAC7B,IAAMC,gBAAgB,GAAGN,KAAK,CAACO,UAAU,CAACN,gBAAgB,CAAC;EAC3D,IAAMO,OAAO,GAAGL,cAAc,CAAC,CAAC;EAChC,IAAMM,WAAW,GAAGP,gBAAgB,CAAC;IACnCQ,EAAE,EAAEF;EACN,CAAC,CAAC;EACF,IAAMG,QAAQ,GAAGP,WAAW,CAAC,CAAC;EAE9B,OAAOJ,KAAK,CAACY,OAAO,CAClB;IAAA,OAAAC,aAAA,CAAAA,aAAA,CAAAA,aAAA,KAAYP,gBAAgB,GAAKG,WAAW;MAAEE,QAAA,EAAAA;IAAA;EAAA,CAAW,EACzD,CAACL,gBAAgB,EAAEG,WAAW,EAAEE,QAAQ,CAC1C,CAAC;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}