{"ast":null,"code":"function _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport Animated, { useAnimatedProps, useDerivedValue, withTiming } from 'react-native-reanimated';\nimport { Line as SVGLine } from 'react-native-svg';\nimport { LineChartDimensionsContext } from \"./Chart\";\nimport React from 'react';\nimport { getXPositionForCurve } from \"./utils/getXPositionForCurve\";\nimport { getYForX } from 'react-native-redash';\nimport { useLineChart } from \"./useLineChart\";\nvar AnimatedLine = Animated.createAnimatedComponent(SVGLine);\nLineChartHorizontalLine.displayName = 'LineChartHorizontalLine';\nvar _worklet_16730957896665_init_data = {\n  code: \"function anonymous() {\\n  const {\\n    at,\\n    getYForX,\\n    parsedPath,\\n    getXPositionForCurve,\\n    withTiming,\\n    offsetY,\\n    yDomain,\\n    height,\\n    gutter\\n  } = this._closure;\\n  if (typeof at === 'number' || at.index != null) {\\n    const index = typeof at === 'number' ? at : at.index;\\n    const yForX = getYForX(parsedPath, getXPositionForCurve(parsedPath, index)) || 0;\\n    return withTiming(yForX + offsetY);\\n  }\\n  const offsetTop = yDomain.max - at.value;\\n  const percentageOffsetTop = offsetTop / (yDomain.max - yDomain.min);\\n  const heightBetweenGutters = height - gutter * 2;\\n  const offsetTopPixels = gutter + percentageOffsetTop * heightBetweenGutters;\\n  return withTiming(offsetTopPixels + offsetY);\\n}\",\n  location: \"C:\\\\Users\\\\om\\\\Downloads\\\\Crypto Exchange\\\\Crypto Exchange\\\\Font-End\\\\crypto_mobile_app (copy)\\\\node_modules\\\\react-native-wagmi-charts\\\\lib\\\\module\\\\charts\\\\line\\\\HorizontalLine.js\",\n  sourceMap: \"{\\\"version\\\":3,\\\"names\\\":[\\\"anonymous\\\",\\\"at\\\",\\\"getYForX\\\",\\\"parsedPath\\\",\\\"getXPositionForCurve\\\",\\\"withTiming\\\",\\\"offsetY\\\",\\\"yDomain\\\",\\\"height\\\",\\\"gutter\\\",\\\"_closure\\\",\\\"index\\\",\\\"yForX\\\",\\\"offsetTop\\\",\\\"max\\\",\\\"value\\\",\\\"percentageOffsetTop\\\",\\\"min\\\",\\\"heightBetweenGutters\\\",\\\"offsetTopPixels\\\"],\\\"sources\\\":[\\\"C:/Users/om/Downloads/Crypto Exchange/Crypto Exchange/Font-End/crypto_mobile_app (copy)/node_modules/react-native-wagmi-charts/lib/module/charts/line/HorizontalLine.js\\\"],\\\"mappings\\\":\\\"AA2B4B,SAAAA,SAAMA,CAAA;EAAA;IAAAC,EAAA;IAAAC,QAAA;IAAAC,UAAA;IAAAC,oBAAA;IAAAC,UAAA;IAAAC,OAAA;IAAAC,OAAA;IAAAC,MAAA;IAAAC;EAAA,SAAAC,QAAA;EAC9B,IAAI,OAAOT,EAAE,KAAK,QAAQ,IAAIA,EAAE,CAACU,KAAK,IAAI,IAAI,EAAE;IAC9C,MAAMA,KAAK,GAAG,OAAOV,EAAE,KAAK,QAAQ,GAAGA,EAAE,GAAGA,EAAE,CAACU,KAAK;IACpD,MAAMC,KAAK,GAAGV,QAAQ,CAACC,UAAU,EAAEC,oBAAoB,CAACD,UAAU,EAAEQ,KAAK,CAAC,CAAC,IAAI,CAAC;IAChF,OAAON,UAAU,CAACO,KAAK,GAAGN,OAAO,CAAC;EACpC;EAWA,MAAMO,SAAS,GAAGN,OAAO,CAACO,GAAG,GAAGb,EAAE,CAACc,KAAK;EACxC,MAAMC,mBAAmB,GAAGH,SAAS,IAAIN,OAAO,CAACO,GAAG,GAAGP,OAAO,CAACU,GAAG,CAAC;EACnE,MAAMC,oBAAoB,GAAGV,MAAM,GAAGC,MAAM,GAAG,CAAC;EAChD,MAAMU,eAAe,GAAGV,MAAM,GAAGO,mBAAmB,GAAGE,oBAAoB;EAC3E,OAAOb,UAAU,CAACc,eAAe,GAAGb,OAAO,CAAC;AAC9C\\\"}\"\n};\nvar _worklet_1307362598246_init_data = {\n  code: \"function anonymous() {\\n  const {\\n    width,\\n    y\\n  } = this._closure;\\n  return {\\n    x1: 0,\\n    x2: width,\\n    y1: y.value,\\n    y2: y.value\\n  };\\n}\",\n  location: \"C:\\\\Users\\\\om\\\\Downloads\\\\Crypto Exchange\\\\Crypto Exchange\\\\Font-End\\\\crypto_mobile_app (copy)\\\\node_modules\\\\react-native-wagmi-charts\\\\lib\\\\module\\\\charts\\\\line\\\\HorizontalLine.js\",\n  sourceMap: \"{\\\"version\\\":3,\\\"names\\\":[\\\"anonymous\\\",\\\"width\\\",\\\"y\\\",\\\"_closure\\\",\\\"x1\\\",\\\"x2\\\",\\\"y1\\\",\\\"value\\\",\\\"y2\\\"],\\\"sources\\\":[\\\"C:/Users/om/Downloads/Crypto Exchange/Crypto Exchange/Font-End/crypto_mobile_app (copy)/node_modules/react-native-wagmi-charts/lib/module/charts/line/HorizontalLine.js\\\"],\\\"mappings\\\":\\\"AAiD6C,SAAAA,UAAA;EAAA;IAAAC,KAAA;IAAAC;EAAA,SAAAC,QAAA;EAAA,OAAO;IAChDC,EAAE,EAAE,CAAC;IACLC,EAAE,EAAEJ,KAAK;IACTK,EAAE,EAAEJ,CAAC,CAACK,KAAK;IACXC,EAAE,EAAEN,CAAC,CAACK;EACR,CAAC;AAAA\\\"}\"\n};\nexport function LineChartHorizontalLine(_ref) {\n  var _ref$color = _ref.color,\n    color = _ref$color === void 0 ? 'gray' : _ref$color,\n    _ref$lineProps = _ref.lineProps,\n    lineProps = _ref$lineProps === void 0 ? {} : _ref$lineProps,\n    _ref$at = _ref.at,\n    at = _ref$at === void 0 ? {\n      index: 0\n    } : _ref$at,\n    _ref$offsetY = _ref.offsetY,\n    offsetY = _ref$offsetY === void 0 ? 0 : _ref$offsetY;\n  var _React$useContext = React.useContext(LineChartDimensionsContext),\n    width = _React$useContext.width,\n    parsedPath = _React$useContext.parsedPath,\n    height = _React$useContext.height,\n    gutter = _React$useContext.gutter;\n  var _useLineChart = useLineChart(),\n    yDomain = _useLineChart.yDomain;\n  var y = useDerivedValue(function () {\n    var _e = [new global.Error(), -10, -27];\n    var _f = function _f() {\n      if (typeof at === 'number' || at.index != null) {\n        var index = typeof at === 'number' ? at : at.index;\n        var yForX = getYForX(parsedPath, getXPositionForCurve(parsedPath, index)) || 0;\n        return withTiming(yForX + offsetY);\n      }\n      var offsetTop = yDomain.max - at.value;\n      var percentageOffsetTop = offsetTop / (yDomain.max - yDomain.min);\n      var heightBetweenGutters = height - gutter * 2;\n      var offsetTopPixels = gutter + percentageOffsetTop * heightBetweenGutters;\n      return withTiming(offsetTopPixels + offsetY);\n    };\n    _f._closure = {\n      at: at,\n      getYForX: getYForX,\n      parsedPath: parsedPath,\n      getXPositionForCurve: getXPositionForCurve,\n      withTiming: withTiming,\n      offsetY: offsetY,\n      yDomain: yDomain,\n      height: height,\n      gutter: gutter\n    };\n    _f.__initData = _worklet_16730957896665_init_data;\n    _f.__workletHash = 16730957896665;\n    _f.__stackDetails = _e;\n    _f.__version = \"3.3.0\";\n    return _f;\n  }(), [at, gutter, height, offsetY, parsedPath, yDomain.max, yDomain.min]);\n  var lineAnimatedProps = useAnimatedProps(function () {\n    var _e = [new global.Error(), -3, -27];\n    var _f = function _f() {\n      return {\n        x1: 0,\n        x2: width,\n        y1: y.value,\n        y2: y.value\n      };\n    };\n    _f._closure = {\n      width: width,\n      y: y\n    };\n    _f.__initData = _worklet_1307362598246_init_data;\n    _f.__workletHash = 1307362598246;\n    _f.__stackDetails = _e;\n    _f.__version = \"3.3.0\";\n    return _f;\n  }(), [width, y]);\n  return React.createElement(AnimatedLine, _extends({\n    animatedProps: lineAnimatedProps,\n    strokeWidth: 2,\n    stroke: color,\n    strokeDasharray: \"3 3\"\n  }, lineProps));\n}","map":{"version":3,"names":["Animated","useAnimatedProps","useDerivedValue","withTiming","Line","SVGLine","LineChartDimensionsContext","React","getXPositionForCurve","getYForX","useLineChart","AnimatedLine","createAnimatedComponent","LineChartHorizontalLine","displayName","_worklet_16730957896665_init_data","code","location","sourceMap","_worklet_1307362598246_init_data","_ref","_ref$color","color","_ref$lineProps","lineProps","_ref$at","at","index","_ref$offsetY","offsetY","_React$useContext","useContext","width","parsedPath","height","gutter","_useLineChart","yDomain","y","_e","global","Error","_f","yForX","offsetTop","max","value","percentageOffsetTop","min","heightBetweenGutters","offsetTopPixels","_closure","__initData","__workletHash","__stackDetails","__version","lineAnimatedProps","x1","x2","y1","y2","createElement","_extends","animatedProps","strokeWidth","stroke","strokeDasharray"],"sources":["C:\\Users\\om\\Downloads\\Crypto Exchange\\Crypto Exchange\\Font-End\\crypto_mobile_app (copy)\\node_modules\\react-native-wagmi-charts\\src\\charts\\line\\HorizontalLine.tsx"],"sourcesContent":["import Animated, {\n  useAnimatedProps,\n  useDerivedValue,\n  withTiming,\n} from 'react-native-reanimated';\nimport { LineProps, Line as SVGLine } from 'react-native-svg';\n\nimport { LineChartDimensionsContext } from './Chart';\nimport React from 'react';\nimport { getXPositionForCurve } from './utils/getXPositionForCurve';\nimport { getYForX } from 'react-native-redash';\nimport { useLineChart } from './useLineChart';\n\nconst AnimatedLine = Animated.createAnimatedComponent(SVGLine);\n\ntype HorizontalLineProps = {\n  color?: string;\n  lineProps?: Partial<LineProps>;\n  offsetY?: number;\n  /**\n   * (Optional) A pixel value to nudge the line up or down.\n   *\n   * This may be useful to customize the line's position based on the thickness of your cursor or chart path.\n   *\n   * ```tsx\n   * <LineChart.HorizontalLine\n   *   at={{ index: 3 }}\n   * />\n   *\n   * // or\n   *\n   * <LineChart.HorizontalLine\n   *   at={{ value: 320.32}}\n   * />\n   * ```\n   */\n  at?:\n    | {\n        index: number;\n        value?: never;\n      }\n    | {\n        index?: never;\n        value: number;\n      }\n    | number;\n};\n\nLineChartHorizontalLine.displayName = 'LineChartHorizontalLine';\n\nexport function LineChartHorizontalLine({\n  color = 'gray',\n  lineProps = {},\n  at = { index: 0 },\n  offsetY = 0,\n}: HorizontalLineProps) {\n  const { width, parsedPath, height, gutter } = React.useContext(\n    LineChartDimensionsContext\n  );\n  const { yDomain } = useLineChart();\n\n  const y = useDerivedValue(() => {\n    if (typeof at === 'number' || at.index != null) {\n      const index = typeof at === 'number' ? at : at.index;\n      const yForX =\n        getYForX(parsedPath!, getXPositionForCurve(parsedPath, index)) || 0;\n      return withTiming(yForX + offsetY);\n    }\n    /**\n     * <gutter>\n     * | ---------- | <- yDomain.max  |\n     * |            |                 | offsetTop\n     * |            | <- value        |\n     * |            |\n     * |            | <- yDomain.min\n     * <gutter>\n     */\n\n    const offsetTop = yDomain.max - at.value;\n    const percentageOffsetTop = offsetTop / (yDomain.max - yDomain.min);\n\n    const heightBetweenGutters = height - gutter * 2;\n\n    const offsetTopPixels = gutter + percentageOffsetTop * heightBetweenGutters;\n\n    return withTiming(offsetTopPixels + offsetY);\n  }, [at, gutter, height, offsetY, parsedPath, yDomain.max, yDomain.min]);\n\n  const lineAnimatedProps = useAnimatedProps(\n    () => ({\n      x1: 0,\n      x2: width,\n      y1: y.value,\n      y2: y.value,\n    }),\n    [width, y]\n  );\n\n  return (\n    <AnimatedLine\n      animatedProps={lineAnimatedProps}\n      strokeWidth={2}\n      stroke={color}\n      strokeDasharray=\"3 3\"\n      {...lineProps}\n    />\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}